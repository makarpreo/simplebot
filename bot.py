import telebot
import telebot.types as types
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup
import config
from main import Car, Note

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}


def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            'current_car_id': 0,
            'chat_id': 0,
            'username': f"user_{user_id}",
            'notes_data': {},
            'editing_note_id': None,
            'editing_note_text': None
        }
    return user_sessions[user_id]


@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    username = message.from_user.username or message.from_user.first_name or f"user_{user_id}"
    user_data['username'] = username
    user_data['chat_id'] = message.chat.id

    show_second_menu(message.chat.id, user_id)


def show_second_menu(chat_id, user_id):
    user_data = get_user_data(user_id)
    markup = types.InlineKeyboardMarkup(row_width=1)

    btn_set_id = types.InlineKeyboardButton(
        text="üî¢ –í—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É",
        callback_data="command:/select_car"
    )
    # btn_add_works = types.InlineKeyboardButton(
    #     text="üìù –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—ã",
    #     callback_data="add_works"
    # )
    # btn_add_parts = types.InlineKeyboardButton(
    #     text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏",
    #     callback_data="add_parts"
    # )

    markup.add(btn_set_id)
    # markup.add(btn_set_id, btn_add_parts, btn_add_works)
    car = Car()
    car_name = car.get_car_name(user_data['current_car_id']) or f"ID {user_data['current_car_id']}"
    bot.send_message(
        chat_id,
        "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        f"<b>–¢–ï–ö–£–©–ê–Ø –ú–ê–®–ò–ù–ê: {car_name}</b>\n",
        parse_mode='HTML',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('command:'))
def handle_command_callback(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    chat_id = call.message.chat.id
    user_data['chat_id'] = chat_id

    command = call.data.split(':')[1]

    class MockMessage:
        def __init__(self, chat_id, text, user_id):
            self.chat = type('Chat', (), {'id': chat_id})()
            self.text = text
            self.from_user = type('User', (), {'id': user_id})()

    mock_message = MockMessage(chat_id, command, user_id)

    if command == '/select_car':
        select_car_from_list(mock_message)
    # elif command == '/add_parts':
    #     ask_parts(mock_message)
    # elif command == '/add_works':
    #     ask_works(mock_message)

    bot.answer_callback_query(call.id, f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {command}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_car:'))
def handle_car_selection(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    chat_id = call.message.chat.id
    user_data['chat_id'] = chat_id

    car_id = int(call.data.split(':')[1])
    user_data['current_car_id'] = car_id

    car = Car()
    car_name = car.get_car_name(car_id) or f"ID {car_id}"

    bot.send_message(chat_id, f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–∞—à–∏–Ω–∞: {car_name} (ID: {car_id})")
    show_second_menu(chat_id, user_id)
    print_notes_for_car(user_id)

    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–∞ –º–∞—à–∏–Ω–∞: {car_name}")


def select_car_from_list(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    car = Car()
    results = car.show_active_list()

    if isinstance(results, str):
        bot.send_message(message.chat.id, results)
        return

    if not results:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—à–∏–Ω.")
        return

    markup = types.InlineKeyboardMarkup(row_width=1)

    for row in results:
        car_id = row[0]
        car_name = row[1] if len(row) > 1 else f"–ú–∞—à–∏–Ω–∞ {car_id}"

        btn_car = types.InlineKeyboardButton(
            text=f"üöó {car_name} (ID: {car_id})",
            callback_data=f"select_car:{car_id}"
        )
        markup.add(btn_car)

    btn_cancel = types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_select"
    )
    markup.add(btn_cancel)

    car = Car()
    car_name = car.get_car_name(user_data['current_car_id']) or f"ID {user_data['current_car_id']}"
    bot.send_message(
        message.chat.id,
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è —Ä–∞–±–æ—Ç—ã:</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è –º–∞—à–∏–Ω–∞: {car_name}",
        parse_mode='HTML',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_select')
def handle_cancel_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã"""
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    bot.send_message(user_data['chat_id'], "‚ùå –í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω")
    bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")


@bot.callback_query_handler(func=lambda call: call.data == 'add_works')
def ask_works(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_action:{user_id}")
    )
    bot.send_message(
        user_data['chat_id'],
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
        reply_markup=markup
    )
    bot.register_next_step_handler(call.message, lambda m: add_works_to_car(m, user_id))


def add_works_to_car(message, user_id):
    user_data = get_user_data(user_id)

    note = Note()
    username = message.from_user.username or message.from_user.first_name or f"user_{user_id}"
    result = note.add_note(
        note_text=message.text,
        car_id=user_data['current_car_id'],
        user_id=username,
        note_type=1
    )
    bot.send_message(message.chat.id, result)
    print_notes_for_car(user_id)

@bot.callback_query_handler(func=lambda call: call.data == 'add_parts')
def ask_parts(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_action:{user_id}")
    )
    bot.send_message(
        user_data['chat_id'],
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
        reply_markup=markup
    )
    bot.register_next_step_handler(call.message, lambda m: add_parts_to_car(m, user_id))


def add_parts_to_car(message, user_id):
    user_data = get_user_data(user_id)

    note = Note()
    username = message.from_user.username or message.from_user.first_name or f"user_{user_id}"
    result = note.add_note(
        note_text=message.text,
        car_id=user_data['current_car_id'],
        user_id=username,
        note_type=0
    )
    bot.send_message(message.chat.id, result)
    print_notes_for_car(user_id)


def print_notes_for_car(user_id):
    user_data = get_user_data(user_id)

    markup = InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
        callback_data=f"edit_last_note:{user_id}"
    ))
    btn_add_works = types.InlineKeyboardButton(
        text="üìù –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—ã",
        callback_data="add_works"
    )
    btn_add_parts = types.InlineKeyboardButton(
        text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏",
        callback_data="add_parts"
    )
    markup.add(btn_add_parts, btn_add_works)
    car = Car()
    note = Note()

    result = note.get_notes_with_ids(user_data['current_car_id'])
    print(result)

    if not result:
        bot.send_message(user_data['chat_id'], '–î–ª—è —ç—Ç–æ–π –º–∞—à–∏–Ω—ã –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π')
        return None

    if isinstance(result, str) and '–û—à–∏–±–∫–∞' in result:
        bot.send_message(user_data['chat_id'], result)
        return

    user_data['notes_data'] = {}
    for note_id, note_text, username, note_type in result:
        user_data['notes_data'][note_id] = (note_text, username, note_type)

    name = car.get_car_name(user_data['current_car_id']) or f"ID {user_data['current_car_id']}"
    summary = f'üöó {name}\n\n'

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    notes_by_type = {0: {}, 1: {}, None: {}}  # 0 = –∑–∞–ø—á–∞—Å—Ç–∏, 1 = —Ä–∞–±–æ—Ç—ã

    for note_id, note_text, username, note_type in result:
        if note_type not in notes_by_type:
            notes_by_type[note_type] = {}

        if username not in notes_by_type[note_type]:
            notes_by_type[note_type][username] = []

        notes_by_type[note_type][username].append(note_text)
    if notes_by_type.get(None):
        print(notes_by_type.get(None))
        summary += "üõ†Ô∏è <b>–°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏:</b>\n"
        for username, notes in notes_by_type.get(None).items():
            summary += f"  üë§ @{username}:\n"
            for i, note_text in enumerate(notes, 1):
                summary += f"    {i}. {note_text}\n"
            summary += "\n"
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ summary —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—á–∞—Å—Ç–∏ (type = 0)
    if notes_by_type.get(0):
        summary += "üîß <b>–ó–∞–ø—á–∞—Å—Ç–∏:</b>\n"
        for username, notes in notes_by_type[0].items():
            summary += f"  üë§ @{username}:\n"
            for i, note_text in enumerate(notes, 1):
                summary += f"    {i}. {note_text}\n"
            summary += "\n"
        summary += "\n"

    # –ó–∞—Ç–µ–º —Ä–∞–±–æ—Ç—ã (type = 1)
    if notes_by_type.get(1):
        summary += "üõ†Ô∏è <b>–†–∞–±–æ—Ç—ã:</b>\n"
        for username, notes in notes_by_type[1].items():
            summary += f"  üë§ @{username}:\n"
            for i, note_text in enumerate(notes, 1):
                summary += f"    {i}. {note_text}\n"
            summary += "\n"


    bot.send_message(user_data['chat_id'], summary, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_last_note:'))
def ask_edit_last_note(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = int(call.data.split(':')[1])
    user_data = get_user_data(user_id)

    note = Note()
    result = note.get_notes_with_ids(user_data['current_car_id'])

    if not result or (isinstance(result, str) and '–û—à–∏–±–∫–∞' in result):
        bot.send_message(user_data['chat_id'], "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        bot.answer_callback_query(call.id, "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
        return

    user_data['notes_data'] = {}
    for note_id, note_text, username, note_type in result:
        user_data['notes_data'][note_id] = (note_text, username)

    markup = types.InlineKeyboardMarkup(row_width=1)

    for note_id, note_text, username, note_type in result:
        truncated_text = (note_text[:17] + "...") if len(note_text) > 20 else note_text

        btn_note = types.InlineKeyboardButton(
            text=f"üìù #{note_id}: {truncated_text}",
            callback_data=f"select_note:{note_id}:{user_id}"
        )
        markup.add(btn_note)

    btn_cancel = types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"cancel_note_select:{user_id}"
    )
    markup.add(btn_cancel)

    bot.send_message(
        user_data['chat_id'],
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n",
        parse_mode='HTML',
        reply_markup=markup
    )

    bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_note:'))
def handle_note_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    parts = call.data.split(':')
    note_id = int(parts[1])
    user_id = int(parts[2])
    user_data = get_user_data(user_id)

    if note_id not in user_data.get('notes_data', {}):
        bot.send_message(user_data['chat_id'], "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")
        return

    note_text, username = user_data['notes_data'][note_id]

    user_data['editing_note_id'] = note_id
    user_data['editing_note_text'] = note_text

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_note_text:{note_id}:{user_id}"),
        types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_note:{note_id}:{user_id}")
    )
    markup.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_action:{user_id}"))

    display_text = note_text[:100] + "..." if len(note_text) > 100 else note_text

    bot.send_message(
        user_data['chat_id'],
        f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username}\n"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n<i>{display_text}</i>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=markup
    )

    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{note_id}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_note_text:'))
def start_edit_note_text(call):
    """–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    parts = call.data.split(':')
    note_id = int(parts[1])
    user_id = int(parts[2])
    user_data = get_user_data(user_id)

    if note_id not in user_data.get('notes_data', {}):
        bot.send_message(user_data['chat_id'], "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")
        return

    note_text, username = user_data['notes_data'][note_id]
    user_data['editing_note_id'] = note_id
    user_data['editing_note_text'] = note_text

    display_text = note_text[:100] + "..." if len(note_text) > 100 else note_text
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_action:{user_id}")
    )
    bot.send_message(
        user_data['chat_id'],
        f"‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<code>{display_text}</code>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
        parse_mode='HTML', reply_markup=markup
    )

    bot.register_next_step_handler(call.message, lambda m: edit_note_text(m, user_id))
    bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_note:'))
def delete_note(call):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    parts = call.data.split(':')
    note_id = int(parts[1])
    user_id = int(parts[2])
    user_data = get_user_data(user_id)

    if note_id not in user_data.get('notes_data', {}):
        bot.send_message(user_data['chat_id'], "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")
        return

    note_text, username = user_data['notes_data'][note_id]

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{note_id}:{user_id}"),
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_action:{user_id}")
    )

    display_text = note_text[:100] + "..." if len(note_text) > 100 else note_text

    bot.send_message(
        user_data['chat_id'],
        f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:</b>\n\n"
        f"<b>ID:</b> {note_id}\n"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n<i>{display_text}</i>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
        parse_mode='HTML',
        reply_markup=markup
    )

    bot.answer_callback_query(call.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ")


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete:'))
def confirm_delete_note(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    parts = call.data.split(':')
    note_id = int(parts[1])
    user_id = int(parts[2])
    user_data = get_user_data(user_id)

    note = Note()
    result = note.delete_note_by_id(note_id)

    if "—É—Å–ø–µ—à–Ω–æ" in result.lower() or "—É–¥–∞–ª–µ–Ω" in result.lower():
        bot.send_message(user_data['chat_id'], f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #{note_id} —É–¥–∞–ª–µ–Ω–æ")
        print_notes_for_car(user_id)
    else:
        bot.send_message(user_data['chat_id'], f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {result}")

    bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")


def edit_note_text(message, user_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_data = get_user_data(user_id)

    if 'editing_note_id' not in user_data:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        return

    new_text = message.text
    note_id = user_data['editing_note_id']
    old_text = user_data.get('editing_note_text', '')

    note = Note()
    result = note.update_note_text(note_id, new_text)

    if "—É—Å–ø–µ—à–Ω–æ" in result.lower() or "–æ–±–Ω–æ–≤–ª–µ–Ω" in result.lower():
        old_display = old_text[:100] + "..." if len(old_text) > 100 else old_text
        new_display = new_text[:100] + "..." if len(new_text) > 100 else new_text

        bot.send_message(
            message.chat.id,
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n\n",
            parse_mode='HTML'
        )
        print_notes_for_car(user_id)
    else:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {result}")

    user_data.pop('editing_note_id', None)
    user_data.pop('editing_note_text', None)


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_action:'))
def handle_cancel_action(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
    user_id = int(call.data.split(':')[1])
    user_data = get_user_data(user_id)

    bot.send_message(user_data['chat_id'], "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")

    user_data.pop('editing_note_id', None)
    user_data.pop('editing_note_text', None)


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_note_select:'))
def handle_cancel_note_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = int(call.data.split(':')[1])
    user_data = get_user_data(user_id)

    bot.send_message(user_data['chat_id'], "‚ùå –í—ã–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω")
    bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")

    user_data.pop('notes_data', None)


# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (init_car_command, add_car, delete_car, show_car_command –∏ —Ç.–¥.)
# –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è user_id

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()
