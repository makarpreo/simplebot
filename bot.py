import re
import telebot
import telebot.types as types
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup
import config  # –º–æ–¥—É–ª—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —Ç.–¥.)
from main import Car, Note

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)
user_data = {'current_car_id': 14, 'chat_id': 0, 'username': ''}


@bot.message_handler(commands=['start'])
def start_command(message):
    username = message.from_user.username or message.from_user.first_name or f"user_{message.from_user.id}"
    user_data['username'] = username
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ –º–µ–Ω—é –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º
    # show_main_menu(message.chat.id)
    show_second_menu(message.chat.id)


def show_main_menu(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –º–µ–Ω—é
    btn_create = types.InlineKeyboardButton(
        text="üöó –°–æ–∑–¥–∞—Ç—å –º–∞—à–∏–Ω—É",
        callback_data="command:/create_car"
    )
    btn_delete = types.InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É",
        callback_data="command:/delete_car"
    )
    btn_show_list = types.InlineKeyboardButton(
        text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—à–∏–Ω",
        callback_data="command:/show_car_list"
    )
    btn_set_id = types.InlineKeyboardButton(
        text="üî¢ –í–´–ë–†–ê–¢–¨ –ú–ê–®–ò–ù–£",
        callback_data="command:/select_car"
    )
    btn_clear = types.InlineKeyboardButton(
        text=" ", callback_data=' '
    )
    markup.row(btn_create, btn_clear, btn_delete)
    markup.add(btn_clear, btn_show_list, btn_set_id)

    bot.send_message(
        chat_id,
        "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        f"<b>–¢–ï–ö–£–©–ê–Ø –ú–ê–®–ò–ù–ê: ID {user_data['current_car_id']}</b>\n"
        "‚Ä¢ üöó <code>/create_car</code> - —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã\n"
        "‚Ä¢ üóëÔ∏è <code>/delete_car</code> - —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã\n"
        "‚Ä¢ üìã <code>/show_car_list</code> - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—à–∏–Ω\n"
        "‚Ä¢ üî¢ <code>/select_car</code> - –≤—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞",
        parse_mode='HTML',
        reply_markup=markup
    )


def show_second_menu(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)

    btn_set_id = types.InlineKeyboardButton(
        text="üî¢ –í—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É",
        callback_data="command:/select_car"
    )
    btn_add_note = types.InlineKeyboardButton(
        text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
        callback_data="command:/add_note"
    )

    # old_v markup.add(btn_show_list,  btn_add_note, btn_print_notes)
    markup.add(btn_set_id, btn_add_note)

    bot.send_message(
        chat_id,
        "üìã <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        f"<b>–¢–ï–ö–£–©–ê–Ø –ú–ê–®–ò–ù–ê: ID {user_data['current_car_id']}</b>\n"
        "‚Ä¢ üìã <code>/show_car_list</code> - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—à–∏–Ω\n"
        "‚Ä¢ üî¢ <code>/select_car</code> - –≤—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "‚Ä¢ üìù <code>/add_note</code> - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∫ –º–∞—à–∏–Ω–µ\n"
        "‚Ä¢ üìÑ <code>/print_notes</code> - –≤—ã–≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ –º–∞—à–∏–Ω—ã",
        parse_mode='HTML',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('command:'))
def handle_command_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    chat_id = call.message.chat.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ callback_data
    command = call.data.split(':')[1]

    # –°–æ–∑–¥–∞–µ–º mock-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    class MockMessage:
        def __init__(self, chat_id, text):
            self.chat = type('Chat', (), {'id': chat_id})()
            self.text = text
            self.from_user = None

    # –°–æ–∑–¥–∞–µ–º mock-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    mock_message = MockMessage(chat_id, command)

    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    if command == '/create_car':
        init_car_command(mock_message)
    elif command == '/delete_car':
        delete_car(mock_message)
    elif command == '/show_car_list':
        show_car_command(mock_message)
    elif command == '/set_id':
        ask_id(mock_message)
    elif command == '/select_car':
        select_car_from_list(mock_message)
    elif command == '/add_note':
        ask_note(mock_message)
    elif command == '/print_notes':
        print_notes_for_car()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    bot.answer_callback_query(call.id, f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {command}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_car:'))
def handle_car_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
    chat_id = call.message.chat.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞—à–∏–Ω—ã –∏–∑ callback_data
    car_id = int(call.data.split(':')[1])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∞—à–∏–Ω—É
    user_data['current_car_id'] = car_id
    user_data['chat_id'] = chat_id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    car = Car()
    car_name = car.get_car_name(car_id) or f"ID {car_id}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.send_message(chat_id, f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–∞—à–∏–Ω–∞: {car_name} (ID: {car_id})")

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–æ–≤—ã–º ID
    # show_main_menu(chat_id)
    show_second_menu(chat_id)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–∞ –º–∞—à–∏–Ω–∞: {car_name}")
    print_notes_for_car()


def select_car_from_list(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    car = Car()
    results = car.show_active_list()

    if isinstance(results, str):  # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å –æ—à–∏–±–∫–∞
        bot.send_message(message.chat.id, results)
        return

    if not results:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—à–∏–Ω.")
        return

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—à–∏–Ω–∞–º–∏
    markup = types.InlineKeyboardMarkup(row_width=1)

    for row in results:
        car_id = row[0]  # ID –º–∞—à–∏–Ω—ã
        car_name = row[1] if len(row) > 1 else f"–ú–∞—à–∏–Ω–∞ {car_id}"  # –ù–∞–∑–≤–∞–Ω–∏–µ

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
        btn_car = types.InlineKeyboardButton(
            text=f"üöó {car_name} (ID: {car_id})",
            callback_data=f"select_car:{car_id}"
        )
        markup.add(btn_car)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    btn_cancel = types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_select"
    )
    markup.add(btn_cancel)

    bot.send_message(
        message.chat.id,
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è —Ä–∞–±–æ—Ç—ã:</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è –º–∞—à–∏–Ω–∞: ID {user_data['current_car_id']}",
        parse_mode='HTML',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_select')
def handle_cancel_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã"""
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "‚ùå –í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω")
    bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")


@bot.message_handler(commands=['set_id'])
def ask_id(message):
    bot.send_message(
        message.chat.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ ID –º–∞—à–∏–Ω—ã —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –±—É–¥–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å:",
    )
    bot.register_next_step_handler(message, set_id)


def set_id(message):
    global user_data
    if str(message.text).isdecimal():
        user_data['current_car_id'] = int(message.text)
        user_data['chat_id'] = message.chat.id

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        car = Car()
        car_name = car.get_car_name(user_data['current_car_id']) or f"ID {user_data['current_car_id']}"

        bot.send_message(message.chat.id, f"‚úÖ ID –º–∞—à–∏–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {car_name}")
    else:
        bot.send_message(message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")


@bot.message_handler(commands=['select_car'])
def select_car_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /select_car"""
    select_car_from_list(message)


# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@bot.message_handler(commands=['create_car'])
def init_car_command(message):
    markup = ReplyKeyboardMarkup()
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, add_car)


def add_car(message):
    car = Car()
    if re.match(r'^/', message.text):
        bot.send_message(
            message.chat.id,
            '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑'
        )
        return None
    result = car.add_car(car_name=message.text)
    bot.send_message(
        message.chat.id,
        result
    )


@bot.message_handler(commands=['delete_car'])
def delete_car(message):
    bot.send_message(
        user_data['chat_id'],
        "–í–≤–µ–¥–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –º–∞—à–∏–Ω—É –≤ –∞—Ä—Ö–∏–≤",
    )
    bot.register_next_step_handler(message, delete)


def delete(message):
    if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        car = Car()
        result = car.delete_car_by_id(car_id=user_data['current_car_id'])
        bot.send_message(message.chat.id, result)
    else:
        bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã ID:{user_data["current_car_id"]}')


@bot.message_handler(commands=['add_note'])
def ask_note(message):
    markup = ReplyKeyboardMarkup()
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, add_note_to_car)


def add_note_to_car(message):
    note = Note()
    username = message.from_user.username or message.from_user.first_name or f"user_{message.from_user.id}"
    result = note.add_note(note_text=message.text, car_id=user_data['current_car_id'], user_id=username)
    bot.send_message(message.chat.id, result)
    print_notes_for_car()


@bot.message_handler(commands=['show_car_list'])
def show_car_command(message):
    car = Car()
    results = car.show_active_list()

    if isinstance(results, str):
        bot.send_message(message.chat.id, results)
        return

    if not results:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—à–∏–Ω.")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—à–∏–Ω:", reply_markup=markup)

    for row in results:
        car_id = row[0]
        car_name = row[1] if len(row) > 1 else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        car_info = f"ID: {car_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {car_name}"
        bot.send_message(message.chat.id, car_info)


@bot.message_handler(commands=['print_notes'])
def print_notes_for_car():
    markup = InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        text="–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å",
        callback_data="edit_last_note"
    ))
    markup.add(types.InlineKeyboardButton(
        text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
        callback_data="command:/add_note"
    ))
    car = Car()
    result = car.print_note(user_data['current_car_id'])
    if not result:
        bot.send_message(user_data['chat_id'], '–î–ª—è —ç—Ç–æ–π –º–∞—à–∏–Ω—ã –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π')
        return None
    if '–û—à–∏–±–∫–∞' in result:
        bot.send_message(user_data['chat_id'], result)
    name = car.get_car_name(user_data['current_car_id'])
    data = []
    summary = f'{name}\n'
    for n, i in result:
        data.append((i, n))
    prev_i = ''
    for i, n in sorted(data, key=lambda y: y[0]):
        if i != prev_i:
            summary += f'@{i}:\n    {n}\n'
        else:
            summary += f'   {n}\n'
        prev_i = i
    bot.send_message(user_data['chat_id'], summary, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'edit_last_note')
def ask_edit_last_note(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã"""
    # car = Car()
    # car.edit_last_note()
    bot.send_message(user_data['chat_id'], "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    bot.register_next_step_handler(call.message, edit_last_note)


def edit_last_note(message):
    car = Car()
    print(car.edit_last_note(username=user_data['username'], text=message.text, car_id=user_data['current_car_id']))
    print_notes_for_car()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
